# -*- coding: utf-8 -*-
"""
/***************************************************************************
 GastronomiaDistritos
																 A QGIS plugin
 Pratos típicos de cada distrito de Portugal
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
															-------------------
				begin                : 2021-05-14
				git sha              : $Format:%H$
				copyright            : (C) 2021 by João Ricardo e Cláudia Palma
				email                : a83553@alunos.uminho.pt
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from PyQt5 import *
from PyQt5.QtCore import Qt
from qgis.core import QgsApplication, QgsVectorLayer, QgsProject, QgsRelation
from qgis.utils import iface
from qgis.gui import QgsMapToolIdentifyFeature
from PyQt5.QtWidgets import QApplication, QWidget, QLabel
from PyQt5.QtGui import QIcon, QPixmap, QImage, QColor
from PyQt5.QtCore import QObject


import random

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .gastronomia_distritos_dialog import GastronomiaDistritosDialog
from .gastronomia_distritos_dialog1 import GastronomiaDistritosDialog1
from .gastronomia_distritos_dialog2 import GastronomiaDistritosDialog2
import os.path


class GastronomiaDistritos:
		"""QGIS Plugin Implementation."""

		def __init__(self, iface):
				"""Constructor.

				:param iface: An interface instance that will be passed to this class
						which provides the hook by which you can manipulate the QGIS
						application at run time.
				:type iface: QgsInterface
				"""
				# Save reference to the QGIS interface
				self.iface = iface
				# initialize plugin directory
				self.plugin_dir = os.path.dirname(__file__)
				# initialize locale
				locale = QSettings().value('locale/userLocale')[0:2]
				locale_path = os.path.join(
						self.plugin_dir,
						'i18n',
						'GastronomiaDistritos_{}.qm'.format(locale))

				if os.path.exists(locale_path):
						self.translator = QTranslator()
						self.translator.load(locale_path)
						QCoreApplication.installTranslator(self.translator)

				# Declare instance attributes
				self.actions = []
				self.menu = self.tr(u'&Gastronomia Distritos')

				# Check if plugin was started the first time in current QGIS session
				# Must be set in initGui() to survive plugin reloads
				self.first_start = None

		# noinspection PyMethodMayBeStatic
		def tr(self, message):
				"""Get the translation for a string using Qt translation API.

				We implement this ourselves since we do not inherit QObject.

				:param message: String for translation.
				:type message: str, QString

				:returns: Translated version of message.
				:rtype: QString
				"""
				# noinspection PyTypeChecker,PyArgumentList,PyCallByClass
				return QCoreApplication.translate('GastronomiaDistritos', message)


		def add_action(
				self,
				icon_path,
				text,
				callback,
				enabled_flag=True,
				add_to_menu=True,
				add_to_toolbar=True,
				status_tip=None,
				whats_this=None,
				parent=None):
		
				icon = QIcon(icon_path)
				action = QAction(icon, text, parent)
				action.triggered.connect(callback)
				action.setEnabled(enabled_flag)

				if status_tip is not None:
						action.setStatusTip(status_tip)

				if whats_this is not None:
						action.setWhatsThis(whats_this)

				if add_to_toolbar:
						# Adds plugin icon to Plugins toolbar
						self.iface.addToolBarIcon(action)

				if add_to_menu:
						self.iface.addPluginToMenu(
								self.menu,
								action)

				self.actions.append(action)

				return action


		def initGui(self):
				"""Create the menu entries and toolbar icons inside the QGIS GUI."""

				icon_path = ':/plugins/gastronomia_distritos/icon.png'
				self.add_action(
						icon_path,
						text=self.tr(u'Gastronomia Portugal'),
						callback=self.run,
						parent=self.iface.mainWindow())

				# will be set False in run()
				self.first_start = True


		def unload(self):
				"""Removes the plugin menu item and icon from QGIS GUI."""
				for action in self.actions:
						self.iface.removePluginMenu(
								self.tr(u'&Gastronomia Portugal'),
								action)
						self.iface.removeToolBarIcon(action)


		def run(self):

				if self.first_start == True:
						self.first_start = False
						self.dlg = GastronomiaDistritosDialog()


				self.dlg.show()

				result = self.dlg.exec_()

				if result == 1:

					path_to_gpkg = '/vsizip//vsicurl/https://raw.githubusercontent.com/JRicardo24/SIG/main/GastronomiaDistrito.zip'
					
					# append the layername part 
					gpkg_Gastronomia_layer = path_to_gpkg + "|layername=Gastronomia"
					
					vlayer1 = QgsVectorLayer(gpkg_Gastronomia_layer, "Gastronomia", "ogr")
					if not vlayer1.isValid():
							print("Layer failed to load!")
					else:
							QgsProject.instance().addMapLayer(vlayer1)

					# get the other layer               
					gpkg_GastronomiaDistritos_layer = path_to_gpkg + "|layername=GastronomiaDistritos"
					
					vlayer = QgsVectorLayer(gpkg_GastronomiaDistritos_layer, "GastronomiaDistritos", "ogr")
					if not vlayer.isValid():
							print("Layer failed to load!")
					else:
							QgsProject.instance().addMapLayer(vlayer)
					
							
					rel = QgsRelation()
					rel.setReferencingLayer( vlayer1.id() )
					rel.setReferencedLayer( vlayer.id() )
					rel.addFieldPair( "Distrito", "Distrito" )
					rel.setId( "Gastronomia_Distrito" )
					rel.setName( "Gastronomia" )
					QgsProject.instance().relationManager().addRelation( rel )

					self.dlg1 = GastronomiaDistritosDialog1()

					features = list(vlayer1.getFeatures())
		

					for i in range (0,10):

						prato=features[random.randint(0,len(features)-1)]
						
						nome=prato['Nome']
						
						image = QImage()

						image.loadFromData(prato['Imagem'])
					
						image_resized = image.scaled(350, 350, QtCore.Qt.KeepAspectRatio)
						
						self.dlg1.label.setPixmap(QPixmap(image_resized))
						self.dlg1.lineEdit.setAlignment(Qt.AlignCenter)
						self.dlg1.lineEdit.setText(str(nome))

						
						def callback(feature):
							"""Code called when the feature is selected by the user"""

							#print("You clicked on feature {}".format(feature.id()))

							selectid = feature.id()
							
							atributos = feature.attributes()

							distrito_escolhido = atributos[1]

							#print (distrito_escolhido)

							distrito_correto = prato['Distrito']

							#print (distrito_correto)

							
							if distrito_escolhido==distrito_correto:

								vlayer = iface.activeLayer()
								vlayer.removeSelection()
								vlayer.select(selectid)
								iface.mapCanvas().setSelectionColor( QColor("green") )

								print ('Acertou')

							else:

								vlayer = iface.activeLayer()
								vlayer.select(selectid)
								iface.mapCanvas().setSelectionColor( QColor("red") )

								print ('Errou')
							
							
						canvas = iface.mapCanvas()
						feature_identifier = QgsMapToolIdentifyFeature(canvas)
							
						# indicates the layer on which the selection will be done
						feature_identifier.setLayer(vlayer)
							
						# use the callback as a slot triggered when the user identifies a feature
						feature_identifier.featureIdentified.connect(callback)
							
						# activation of the map tool
						canvas.setMapTool(feature_identifier)


						self.dlg1.show()
						
						result = self.dlg1.exec_()
						
						
						vlayer.removeSelection()


						i=i+1


						if result == 1:

							pass
							
					self.dlg2 = GastronomiaDistritosDialog2()
					
					self.dlg2.show()
					
					result = self.dlg2.exec_()












					





